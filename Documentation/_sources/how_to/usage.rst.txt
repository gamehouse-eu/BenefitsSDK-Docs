Usage
======================

How it works
----------------

To authenticate a user, you need to make some calls against our SDK.

The first step, is asking the user to input their email. Once you have the email, you need to call `StartLogin`, which will send a One Time Password (OTP) to the provided email address.

After they received the code by email, you need to call `Validate` which will send both the email address and the OTP to authenticate properly.

Once authenticated, the SDK will store the login token locally, which will persist until the user calls `Logout` explicitly.

On future app startups, the SDK will take the saved tokens, and re-authenticate on background when calling the `Initialize`.

Initialization
----------------------

It's important, at the start of your game, to initialize the BenefitsSDK. You can do this by calling:

 .. code-block:: none

    IBenefitsSdk.Instance.Initialize();

Keep in mind, that if you need to, you can await this call, so execution continues once the initialization is finished.

This method has an optional parameter which is the Advertising Id (idfa on iOS, googleAdId on Android). If you have request the user permission to track it, please pass it to the SDK.

 .. code-block:: none

    IBenefitsSdk.Instance.Initialize(<advertising id>);

After the initialization is done, you can access the `IsUserLoggedIn` && `IsUserSubscribed` properties.

Login
----------------------
At some point in your game, you will want the user to login, to be able to check their subscription status.

The first step, is to prompt the user for their email address, and make a call to:

 .. code-block:: none

    var success = await IBenefitsSdk.Instance.StartLogin(<user_email>);

If success returns `true`, it means that an email with a validation code was sent to the user.

The next step, is to prompt the user to input that validation code, and make a call to:

 .. code-block:: none
    
    var success = await IBenefitsSdk.Instance.Validate(<user_email>, <validation_code>);

If success returns `true`, it means the user is already logged in with the BenefitsSdk.

Keep in mind, that you only need to do this once (unless the user logs out). On future calls to the `Initialize` method, the SDK will automatically re-authenticate the user, if needed.

You can also subscribe to the `OnUserLoggedIn` event, to know when the user has successfully logged in.

 .. code-block:: none
    
       private void OnEnable()
       {
           IBenefitsSdk.OnUserLoggedIn += OnUserLoggedIn;
       }
       
If you don't want to implement this from scratch, or you want to see a working example, you can import the `Example Scene` from the Package Manager UI & use the `LoginPopup` prefab.

Logout
----------------------
If you detect that user is logged in, you need to provide an option to log out.

To do this, make a call to:

 .. code-block:: none

    IBenefitsSdk.Instance.Logout();
    
This call will delete the stored credentials, and the user will be logged out.

You can also subscribe to the `OnUserLoggedOut` event, to know when the user has successfully logged out.

 .. code-block:: none
    
       private void OnEnable()
       {
           IBenefitsSdk.OnUserLoggedOut += OnUserLoggedOut;
       }

Event Tracking
----------------------
If you were asked to send any custom event by your GameHouse point of contact, you can do that by making the call to:

 .. code-block:: none

    IBenefitsSdk.Instance.EventTracker.TrackCustomEvent(<event_name>, <event_params>);


Sample Scene
----------------------   
From the Package Manager UI, you can import the Sample `Example Scene` to see how all of this should work.
This contains the scene itself, and some prefabs that you can use as a starting point for your implementation.